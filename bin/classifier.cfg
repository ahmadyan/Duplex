@include "generic.cfg" @ifExists ;

# configuration file for multi-class logistic regression
# Refer to example.cfg as the reference config file for description of each field

Duplex {
	name = "Automated handwritten recognition using multi-class logistic regression";
	mode = "classification";
	iterations = "10";
	output = working_directory + "simple.png";
    savefile = working_directory + "simple.xml" ;
	initial_state_assignment = "assigned";  #initial states can be either "random" or "assigned"
    initial_temperature = "1";
    initial_step_length = "1";

    classification{
        mode="logistic";
        classes="2";
    };

    data{
        size="100";
        dimension="2";
        source="ex2data1.txt";
        format=",";

        # if this is a labeled data, reads the labels and stores them in label, labels should be int
        has_label="true";
        # adds 1 to the begining of each row, i.e. x[0]=1
        bias="true";
        label_column="2";
    };


    optimization{
        algorithm="gd";
        learning_rate="0.0001";
        decay="0";
        epsilon="1e-9";
        momentum="0.9";
        nestrov="false";
        fudge_factor="1e-4";
        autocorrelation="0.95";
        exponential_decay_rates_beta1="0.9";
        exponential_decay_rates_beta2="0.999";
        bias_correction="false";
        adadelta_acceleration = "disable";
        schedule_decay="0.004";
    };

    plot{
        enable="false";
        uid-plot{
            type = "tree.parameter";
            # The parameter plot supports three types of plotting: {default, contour, surf}
            # Vanilla plotting plots agains a white background
            # contour plot is a 2d plot with contour lines in the background, but requires the function to be strictly defined (no hspice support)
            # surf is a 3d plot, also requires the function f to be strictly defined.
            # if using the surf plot type, you also need to provide the z dimension
            plot = "contour";
            x="0";
            y="1";
            # z dimension for the surf plot
            z="0";
            # the size of the plotting window, can be "default" (adhere to the strict max/min value of the parameter) or
            # "adaptive" (automatically determine the window size from the data)
            # possible values = {default, adaptive}
            size="adaptive";
        }
	};

    ############################
    # Parameter list
    ############################
    parameter {
        size = "3";
        uid-parameter {
            name = "theta0";     
            comment = "theta0";      
            range {     
                min = "-100";
                max = "100";
            };      
            init = "0";
            unit = "u";     
        };

        uid-parameter {
            name = "theta1";     
            comment = "theta1";      
            range {     
                min = "-100";     
                max = "100";
            };      
            init = "0";
            unit = "u";     
        };
        uid-parameter {
            name = "theta2";
            comment = "theta2";
            range {
                min = "-100";
                max = "100";
            };
            init = "0";
            unit = "u";
        };
    };

    ############################
    # Performance metric list
    ############################
    objective {
        size = "1";
        gradient="false";                            #implies gradient information exists

        uid-objective {     
            name = "f";     
            keyword = "Saddle"; 
            
            function = "x*x*x-3*x*y*y";             # x^3-3xy^2         
            comment = "Monkey Saddle Point";        
            goal {      
                mode = "minimize";
                optimum = "0";
                min = "0";
                max = "1";
            };      
            min = "0";      
            max = "50";


            uid-grad {
                name = "df/dx";
                derivative = "3*(x*x-y*y)";
            };
            uid-grad {
                name = "df/dy";
                derivative = "-6*x*y";
            };
        };      
    };

};

