@include "generic.cfg" @ifExists ;


Duplex {
	#controls the rate of temperature decrease in Duplex
	temperature = "fast"; #["fast", "boltz", "exp"]
	#Annealing option describes how far the next input should be from the current input
	annealing = "fast-random"; #["fast", "boltz", "fast-random", "boltz-random"]
	initial_temperature = "2";
	initial_step_length = "1";

	#reinforcement learning options
	reinforcement_learning = "false";
	min_reward = "0.2";
	max_reward = "5";
	delta_reward = "1";

    plot{
        enable="false";      #["true", "false"]
		# determines the type of the plot. Can be the error time-series ("error"), distance time-series ("distance"),
		# parameter tree ("tree.parameter") and objective-tree ("tree.objective")
        @if (osType() == "windows") {
            gnuplot = "C:\\opt\\gnuplot\\bin\\gnuplot.exe -persist";
        } @else {
            gnuplot = "/usr/local/bin/gnuplot";
        }
    };

	sensitivity-analysis {
		enable="true";
		mode="delta";
		relativeSensitivityThreshold = "0.0";
	};

	simulation{		
        engine = "internal";			#["hspice", "internal"];		
    };
    ############################		
	# Parameter list 		
	############################		
    parameter {		
        size = "3";		
        uid-parameter {		
            name = "x";		
            comment = "parameter x";		
            range {		
                min = "-2";		
                max = "4";		
            };		
            init = "0";					#can also be random, may be overridden if the initial state is random		
            unit = "u";		
        };		
        		
        uid-parameter {		
            name = "y";		
            comment = "parameter y";		
            range {		
                min = "-2";		
                max = "4";		
            };		
            init = "0";		
            unit = "u";		
        };	

		uid-parameter {		
            name = "z";		
            comment = "parameter z";		
            range {		
                min = "-2";		
                max = "4";		
            };		
            init = "0";		
            unit = "u";		
        };		
    };		
			
			
	############################		
	# Performance metric list 		
	############################		
    objective {		
        size = "2";		
        uid-objective {		
            name = "i";		
			keyword = "i";		
			function = "(x+y)*z";			# function defines the system and how this objective is computed from the parameters		
            comment = "output 1";		
            goal {		
                optimum = "2";		
                min = "1.8";		
                max = "2.2";		
            };		
            min = "-1";		
            max = "3";		
        };		
        uid-objective {		
            name = "j";		
			keyword = "j";		
			function = "x*y";			# function defines the system and how this objective is computed from the parameters		
            comment = "output 2";		
            goal {		
                optimum = "1";		
                min = "0.8";		
                max = "1.2";		
            };		
            min = "-1";		
            max = "3";		
        };		
    };
};
